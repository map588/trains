plugins {
    id 'java'
    id 'application'
    id 'antlr'
    id 'org.openjfx.javafxplugin' version '0.1.0' // Make sure this is the latest or a compatible version

}
group = 'org.james'
version = '1.0'
java.sourceCompatibility = JavaVersion.VERSION_17


repositories {
    mavenCentral()
}

javafx {
    version = "21.0.1" // Or the version that matches your requirements
    modules = [ 'javafx.controls', 'javafx.fxml']
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation('org.testfx:testfx-junit5:4.0.17')
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.5.1'

    // Additional libraries
    implementation group: 'eu.hansolo', name: 'medusa', version: '17.1.7'
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.2.0'

    // PLC Lanaguage in ANTLR
    implementation 'org.antlr:antlr4-runtime:4.9.2'
    antlr 'org.antlr:antlr4:4.9.2'

    // Serial Library jSerialComm
    implementation 'com.fazecast:jSerialComm:2.10.4'
}

generateGrammarSource {
    arguments += ['-visitor', '-no-listener', '-package', 'waysideController.plc.parser']
    outputDirectory = file("src/main/java/waysideController/plc.parser")
}


application {
    mainClass = project.hasProperty("mainClass") ? project.getProperty("mainClass") : 'Framework.GUI.mainMenu'
}

def getJavaFXLibPath() {
    def os = org.gradle.internal.os.OperatingSystem.current()
    def arch = System.getProperty("os.arch")
    def libPath = 'javafx-sdk/javafx-sdk-17.0.10' // Default base directory for JavaFX SDKs

    if (os.isWindows()) {
        libPath += '-windows'
    } else if (os.isMacOsX()) {
        if (arch.startsWith("aarch64") || arch.startsWith("arm")) {
            libPath += '-osx-arm64'
        } else {
            libPath += '-osx-x64'
        }
    } else if (arch.startsWith("aarch64") || arch.startsWith("arm")){
        libPath += '-rpi'
    } else {
        throw new GradleException("Unsupported OS")
    }

    // Append the standard lib directory of JavaFX SDK
    return "${project.rootDir}/${libPath}/lib"
}

test {
    useJUnitPlatform()
}

run {
    doFirst {
        def javafxLibPath = getJavaFXLibPath()
        jvmArgs = [
                '--module-path', javafxLibPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}
