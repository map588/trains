plugins {
    id 'java'
    id 'application'
    id 'antlr'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.james'
version = '1.0'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

javafx {
    version = "17.0.10"
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.5.1'
    testImplementation 'org.testfx:openjfx-monocle:17.0.10'

    testImplementation 'org.testfx:testfx-core:4.0.18'
    testImplementation 'org.testfx:testfx-junit5:4.0.18'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // Additional libraries
    implementation 'eu.hansolo:medusa:17.1.7'
    implementation 'org.controlsfx:controlsfx:11.2.0'

    // PLC Language in ANTLR
    implementation 'org.antlr:antlr4-runtime:4.9.2'
    antlr 'org.antlr:antlr4:4.9.2'

    // Serial Library jSerialComm
    implementation 'com.fazecast:jSerialComm:2.10.4'

    // Logging
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'ch.qos.logback:logback-classic:1.4.14'

    //BlueCove
    implementation 'io.ultreia:bluecove:2.1.1'

}

generateGrammarSource {
    println "Generating grammar source"
    arguments += ['-visitor', '-no-listener', '-package', 'waysideController.plc_parser']
    outputDirectory = file("src/main/java/waysideController/plc_parser")
}

application {
    mainClass = project.hasProperty("mainClass") ? project.getProperty("mainClass") : 'Framework.Simulation.Main'
    //mainClass = 'Framework.GUI.TrackLayoutVisualizer'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}

// Output to build/libs/trains.jar
shadowJar {
    archiveBaseName.set('trains')
    archiveClassifier.set('')
    archiveVersion.set('')
}

def getJavaFXLibPath() {
    def os = org.gradle.internal.os.OperatingSystem.current()
    def arch = System.getProperty("os.arch")
    def macLibPath = '/javafx-sdk/javafx-sdk-17.0.10' // Default base directory for JavaFX SDKs
    def winLibPath = '/javafx-sdk/javafx-sdk-17.0.10' // Default base directory for JavaFX SDKs

    if (os.isWindows()) {
        println "This is WINDOWS!"
        winLibPath += '-windows'
    } else if (os.isMacOsX()) {
        if (arch.startsWith("aarch64") || arch.startsWith("arm")) {
            macLibPath += '-osx-arm64'
        } else {
            macLibPath += '-osx-x64'
        }
    } else if (arch.startsWith("aarch64") || arch.startsWith("arm")) {
        macLibPath += '-rpi'
    } else {
        throw new GradleException("Unsupported OS")
    }

    def libPath = os.isWindows() ? winLibPath : macLibPath

    println "JavaFX SDK path: ${project.rootDir}${libPath}/lib"

    // Append the standard lib directory of JavaFX SDK
    return "${project.rootDir}${libPath}/lib"
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
        resources {
            srcDirs 'src/main/resources'
        }
    }
    test {
        java {
            srcDirs 'src/test/java'
        }
        resources {
            srcDirs 'src/main/resources'
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // or choose 'EXCLUDE' to ignore duplicates
}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    doFirst {
        def javafxLibPath = getJavaFXLibPath()
        jvmArgs = [
                '--module-path', javafxLibPath,
        ]
    }
}

run {
    println "Running application"
    doFirst {
        def javafxLibPath = getJavaFXLibPath()
        jvmArgs = [
                '--module-path', javafxLibPath,
        ]
    }
}